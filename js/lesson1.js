"use strict";
let taskNumber = null;

while (taskNumber != 4) {
  switch (
    (taskNumber = +prompt(
      "Введите номер задания. Если хотите завершить работу, введите 4."
    ))
  ) {
    case 1:
      let temperatureCelsius;

      //Запрос температуры в градусах Цельсия
      do {
        temperatureCelsius = +prompt(
          "Введите значение температуры в градусах Цельсия"
        );
      } while (isNaN(temperatureCelsius));

      //Расчёт температуры в градусах Фаренгейта
      let temperatureFarengate = (9 / 5) * temperatureCelsius + 32;

      // Вывод рассчитанного значения
      alert(`Введённое значение температуры в градусах Цельсия: ${temperatureCelsius}
            соответствует ${temperatureFarengate} градус(ов)ам по шкале Фаренгейта`);

      break;

    case 2:
      alert("Посмотрите в консоль! ");
      debugger;
      let admin, name;
      name = "Василий";
      admin = name;
      console.log(admin);
      console.log("В переменной admin хранится строка " + admin);
      break;

    case 3:
      /*
        1. Складываем 10 и 10. Получаем 20.
        2. Т.к. правый операнд является строкой, бинарный плюс неявно приводит левую часть выражения к строке.
        3. Происходит конкантенация строк "20" и "10". В результате получаем строку "2010".
        4. Результат вычислений присваиваем переменной result1.
        5. Выводим значение переменной result1 в консоль.
        */
      console.group('Выражение 10 + 10 + "10"');
      let result1 = 10 + 10 + "10";
      alert("Посмотрите в консоль! ");
      console.log(`
        1. Складываем 10 и 10. Получаем 20.
        2. Т.к. правый операнд является строкой, бинарный плюс неявно приводит левую часть выражения к строке.
        3. Происходит конкантенация строк "20" и "10". В результате получаем строку "2010".
        4. Результат вычислений присваиваем переменной result1.
        5. Выводим значение переменной result1 в консоль.
      `);
      console.log(result1);
      console.groupEnd();
      debugger;

      /*
        1. Складываем число 10 и строку "10". Т.к. один из операндов является строкой, бинарный плюс неявно приводит первое слагаемое к строке.
        2. Происходит конкантенация строк "10" и "10". Получаем строку "1010".
        3. Складываем строку "1010" и число 10. Т.к. один из операндов является строкой, бинарный плюс неявно приводит второе слагаемое к строке.
        4. Происходит конкантенация строк "1010" и "10". В результате получаем строку "101010".
        5. Результат вычислений присваиваем переменной result1.
        6. Выводим значение переменной result1 в консоль.
        */
      console.group('Выражение 10 + "10" + 10');
      result1 = 10 + "10" + 10;
      alert("Посмотрите в консоль! ");
      console.log(`
        1. Складываем число 10 и строку "10". Т.к. один из операндов является строкой, бинарный плюс неявно приводит первое слагаемое к строке.
        2. Происходит конкантенация строк "10" и "10". Получаем строку "1010".
        3. Складываем строку "1010" и число 10. Т.к. один из операндов является строкой, бинарный плюс неявно приводит второе слагаемое к строке.
        4. Происходит конкантенация строк "1010" и "10". В результате получаем строку "101010".
        5. Результат вычислений присваиваем переменной result1.
        6. Выводим значение переменной result1 в консоль.
      `);
      console.log(result1);
      console.groupEnd();
      debugger;

      /*
        1. Перед строкой "10" в правой части выражения стоит унарный плюс, приоритет которого выше, чем у бинарного, поэтому вычисления начинаются справа.
        2. Унарный плюс неявно приводит строку "10" в правой части выражения к числу 10.
        3. По правилам ассоциативности опрации с бинарными плюсами выполняем слева направо.
        4. Складываем число 10 и число 10. Получаем число 20.
        2. Складываем число 20 и число 10. Получаем число 30.
        5. Результат вычислений присваиваем переменной result1.
        6. Выводим значение переменной result1 в консоль.
        */
      console.group('Выражение 10 + 10 + +"10"');
      result1 = 10 + 10 + +"10";
      alert("Посмотрите в консоль! ");
      console.log(`
        1. Перед строкой "10" в правой части выражения стоит унарный плюс, приоритет которого выше, чем у бинарного, поэтому вычисления начинаются справа.
        2. Унарный плюс неявно приводит строку "10" в правой части выражения к числу 10.
        3. По правилам ассоциативности опрации с бинарными плюсами выполняем слева направо.
        4. Складываем число 10 и число 10. Получаем число 20.
        2. Складываем число 20 и число 10. Получаем число 30.
        5. Результат вычислений присваиваем переменной result1.
        6. Выводим значение переменной result1 в консоль.
      `);
      console.log(result1);
      console.groupEnd();
      debugger;

      /*
        1. У унарного минуса приоритет выше, чем у оператора деления.
        2. Унарный минус неявно приводит пустую строку к числу -0.
        3. Деление положительного числа на -0 даёт минус бесконечность: -Infinity.
        4. Результат вычислений присваиваем переменной result1.
        5. Выводим значение переменной result1 в консоль.
        */
      console.group('Выражение 10 / -""');
      result1 = 10 / -"";
      alert("Посмотрите в консоль! ");
      console.log(`
        1. У унарного минуса приоритет выше, чем у оператора деления.
        2. Унарный минус неявно приводит пустую строку к числу -0.
        3. Деление положительного числа на -0 даёт минус бесконечность: -Infinity.
        4. Результат вычислений присваиваем переменной result1.
        5. Выводим значение переменной result1 в консоль.
      `);
      console.log(result1);
      console.groupEnd();
      debugger;

      /*
        1. Унарный плюс имеет более высокий приоритет, чем оператор деления, и неявно приводит строку "+2,5" в правой части выражения к числу.
        2. Т.к. в строке "2,5" присутствует запятая, то преобразовать её к числу не удаётся (результатом становится специальное значение NaN).
        2. В результате деления 10 на NaN получаем специальное числовое значение NaN.
        3. Результат вычислений присваиваем переменной result1.
        4. Выводим значение переменной result1 в консоль.
        */
      console.group('Выражение 10 / +"2,5"');
      result1 = 10 / +"2,5";
      alert("Посмотрите в консоль! ");
      console.log(`
        1. Унарный плюс имеет более высокий приоритет, чем оператор деления, и неявно приводит строку "+2,5" в правой части выражения к числу.
        2. Т.к. в строке "2,5" присутствует запятая, то преобразовать её к числу не удаётся (результатом становится специальное значение NaN).
        2. В результате деления 10 на NaN получаем специальное числовое значение NaN.
        3. Результат вычислений присваиваем переменной result1.
        4. Выводим значение переменной result1 в консоль.
      `);
      console.log(result1);
      console.groupEnd();
      debugger;
      break;

    case 4:
      alert("Работа программы завершена ");
      break;

    default:
      alert("Введите правильный номер задания");
      break;
  }
}
